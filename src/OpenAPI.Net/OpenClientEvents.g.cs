// <auto-generated>
//     Generated by TextTemplatingFileGenerator.  DO NOT EDIT!
// </auto-generated>

using Google.Protobuf;
using OpenAPI.Net.Helpers;
using ProtoOA.Event;
using System;
using System.Linq;
using System.Threading.Tasks;

namespace OpenAPI.Net
{
    public sealed partial class OpenClient
    {
        public event EventHandlerAsync<ClientDisconnectEvent> ClientDisconnectEvent;
        public event EventHandlerAsync<AccountsTokenInvalidatedEvent> AccountsTokenInvalidatedEvent;
        public event EventHandlerAsync<ExecutionEvent> ExecutionEvent;
        public event EventHandlerAsync<TrailingSLChangedEvent> TrailingSLChangedEvent;
        public event EventHandlerAsync<SymbolChangedEvent> SymbolChangedEvent;
        public event EventHandlerAsync<TraderUpdatedEvent> TraderUpdatedEvent;
        public event EventHandlerAsync<OrderErrorEvent> OrderErrorEvent;
        public event EventHandlerAsync<MarginChangedEvent> MarginChangedEvent;
        public event EventHandlerAsync<SpotEvent> SpotEvent;
        public event EventHandlerAsync<DepthEvent> DepthEvent;
        public event EventHandlerAsync<AccountDisconnectEvent> AccountDisconnectEvent;
        public event EventHandlerAsync<MarginCallUpdateEvent> MarginCallUpdateEvent;
        public event EventHandlerAsync<MarginCallTriggerEvent> MarginCallTriggerEvent;

        private async Task MessageEventHandlersAsync(IMessage message)
        {
            switch (message)
            {
            case ClientDisconnectEvent mClientDisconnectEvent:
                await Raise(ClientDisconnectEvent, mClientDisconnectEvent);
                break;
            case AccountsTokenInvalidatedEvent mAccountsTokenInvalidatedEvent:
                await Raise(AccountsTokenInvalidatedEvent, mAccountsTokenInvalidatedEvent);
                break;
            case ExecutionEvent mExecutionEvent:
                await Raise(ExecutionEvent, mExecutionEvent);
                break;
            case TrailingSLChangedEvent mTrailingSLChangedEvent:
                await Raise(TrailingSLChangedEvent, mTrailingSLChangedEvent);
                break;
            case SymbolChangedEvent mSymbolChangedEvent:
                await Raise(SymbolChangedEvent, mSymbolChangedEvent);
                break;
            case TraderUpdatedEvent mTraderUpdatedEvent:
                await Raise(TraderUpdatedEvent, mTraderUpdatedEvent);
                break;
            case OrderErrorEvent mOrderErrorEvent:
                await Raise(OrderErrorEvent, mOrderErrorEvent);
                break;
            case MarginChangedEvent mMarginChangedEvent:
                await Raise(MarginChangedEvent, mMarginChangedEvent);
                break;
            case SpotEvent mSpotEvent:
                await Raise(SpotEvent, mSpotEvent);
                break;
            case DepthEvent mDepthEvent:
                await Raise(DepthEvent, mDepthEvent);
                break;
            case AccountDisconnectEvent mAccountDisconnectEvent:
                await Raise(AccountDisconnectEvent, mAccountDisconnectEvent);
                break;
            case MarginCallUpdateEvent mMarginCallUpdateEvent:
                await Raise(MarginCallUpdateEvent, mMarginCallUpdateEvent);
                break;
            case MarginCallTriggerEvent mMarginCallTriggerEvent:
                await Raise(MarginCallTriggerEvent, mMarginCallTriggerEvent);
                break;
            }
        }
    }
}


namespace ProtoOA.Event
{
    public sealed partial class ClientDisconnectEvent : IEventMessage<ClientDisconnectEvent>, IOAMessage { }
    public sealed partial class AccountsTokenInvalidatedEvent : IEventMessage<AccountsTokenInvalidatedEvent>, IOAMessage { }
    public sealed partial class ExecutionEvent : IEventMessage<ExecutionEvent>, IOAMessage { }
    public sealed partial class TrailingSLChangedEvent : IEventMessage<TrailingSLChangedEvent>, IOAMessage { }
    public sealed partial class SymbolChangedEvent : IEventMessage<SymbolChangedEvent>, IOAMessage { }
    public sealed partial class TraderUpdatedEvent : IEventMessage<TraderUpdatedEvent>, IOAMessage { }
    public sealed partial class OrderErrorEvent : IEventMessage<OrderErrorEvent>, IOAMessage { }
    public sealed partial class MarginChangedEvent : IEventMessage<MarginChangedEvent>, IOAMessage { }
    public sealed partial class SpotEvent : IEventMessage<SpotEvent>, IOAMessage { }
    public sealed partial class DepthEvent : IEventMessage<DepthEvent>, IOAMessage { }
    public sealed partial class AccountDisconnectEvent : IEventMessage<AccountDisconnectEvent>, IOAMessage { }
    public sealed partial class MarginCallUpdateEvent : IEventMessage<MarginCallUpdateEvent>, IOAMessage { }
    public sealed partial class MarginCallTriggerEvent : IEventMessage<MarginCallTriggerEvent>, IOAMessage { }
}   