<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".g.cs" #>
// <auto-generated>
//     Generated by TextTemplatingFileGenerator.  DO NOT EDIT!
// </auto-generated>

using Google.Protobuf;
using OpenAPI.Net.Helpers;
using ProtoOA.Event;
using System;
using System.Linq;
using System.Threading.Tasks;

namespace OpenAPI.Net
{
    public sealed partial class OpenClient
    {
<#
string filter = "public sealed partial class";
string[] sourceCodeRows = File.ReadAllLines(@"src\OpenAPI.Net\Messages\OpenApiMessages.cs");
string[] eventNames = sourceCodeRows.Where(r => r.StartsWith(filter) & r.EndsWith("Event>"))
    .Select(r => r.Substring(r.IndexOf("<") + 8))    //Without "<ProtoOA".Length = 8
    .Select(r => r.Substring(0, r.Length - 1))       //Remove ">" at end
    .ToArray();
bool isFileHeader = true;
bool isRegionMessages = false;
bool skip = true;
string classDefinition = string.Empty;
foreach(string eventName in eventNames)
{ #>
        public event EventHandlerAsync<<#= eventName #>> <#= eventName #>;
<#
} #>

        private async Task MessageEventHandlersAsync(IMessage message)
        {
            switch (message)
            {
<#
foreach(string eventName in eventNames)
{ #>
            case <#= eventName #> m<#= eventName #>:
                await Raise(<#= eventName #>, m<#= eventName #>);
                break;
<#
} #>
            }
        }
    }
}


namespace ProtoOA.Event
{
<#
foreach(string eventName in eventNames)
{ #>
    public sealed partial class <#= eventName #> : IEventMessage<<#= eventName #>>, IOAMessage { }
<#
} #>
}   