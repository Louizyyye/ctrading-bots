// <auto-generated>
//     Generated by TextTemplatingFileGenerator.  DO NOT EDIT!
// </auto-generated>

using Google.Protobuf;
using OpenAPI.Net.Helpers;
using ProtoOA.Event;
using System;
using System.Linq;
using System.Threading.Tasks;

namespace OpenAPI.Net
{
    public sealed partial class OpenClient
    {
        public ObservableEvent<ClientDisconnectEvent> ClientDisconnectObservable { get; private set; } = new();
        public ObservableEvent<AccountsTokenInvalidatedEvent> AccountsTokenInvalidatedObservable { get; private set; } = new();
        public ObservableEvent<ExecutionEvent> ExecutionObservable { get; private set; } = new();
        public ObservableEvent<TrailingSLChangedEvent> TrailingSLChangedObservable { get; private set; } = new();
        public ObservableEvent<SymbolChangedEvent> SymbolChangedObservable { get; private set; } = new();
        public ObservableEvent<TraderUpdatedEvent> TraderUpdatedObservable { get; private set; } = new();
        public ObservableEvent<OrderErrorEvent> OrderErrorObservable { get; private set; } = new();
        public ObservableEvent<MarginChangedEvent> MarginChangedObservable { get; private set; } = new();
        public ObservableEvent<SpotEvent> SpotObservable { get; private set; } = new();
        public ObservableEvent<DepthEvent> DepthObservable { get; private set; } = new();
        public ObservableEvent<AccountDisconnectEvent> AccountDisconnectObservable { get; private set; } = new();
        public ObservableEvent<MarginCallUpdateEvent> MarginCallUpdateObservable { get; private set; } = new();
        public ObservableEvent<MarginCallTriggerEvent> MarginCallTriggerObservable { get; private set; } = new();

        private void MessageObservableEventHandlers(IMessage message)
        {
            switch (message)
            {
                case ClientDisconnectEvent mClientDisconnectEvent:
                    ClientDisconnectObservable.OnNext(mClientDisconnectEvent);
                    break;
                case AccountsTokenInvalidatedEvent mAccountsTokenInvalidatedEvent:
                    AccountsTokenInvalidatedObservable.OnNext(mAccountsTokenInvalidatedEvent);
                    break;
                case ExecutionEvent mExecutionEvent:
                    ExecutionObservable.OnNext(mExecutionEvent);
                    break;
                case TrailingSLChangedEvent mTrailingSLChangedEvent:
                    TrailingSLChangedObservable.OnNext(mTrailingSLChangedEvent);
                    break;
                case SymbolChangedEvent mSymbolChangedEvent:
                    SymbolChangedObservable.OnNext(mSymbolChangedEvent);
                    break;
                case TraderUpdatedEvent mTraderUpdatedEvent:
                    TraderUpdatedObservable.OnNext(mTraderUpdatedEvent);
                    break;
                case OrderErrorEvent mOrderErrorEvent:
                    OrderErrorObservable.OnNext(mOrderErrorEvent);
                    break;
                case MarginChangedEvent mMarginChangedEvent:
                    MarginChangedObservable.OnNext(mMarginChangedEvent);
                    break;
                case SpotEvent mSpotEvent:
                    SpotObservable.OnNext(mSpotEvent);
                    break;
                case DepthEvent mDepthEvent:
                    DepthObservable.OnNext(mDepthEvent);
                    break;
                case AccountDisconnectEvent mAccountDisconnectEvent:
                    AccountDisconnectObservable.OnNext(mAccountDisconnectEvent);
                    break;
                case MarginCallUpdateEvent mMarginCallUpdateEvent:
                    MarginCallUpdateObservable.OnNext(mMarginCallUpdateEvent);
                    break;
                case MarginCallTriggerEvent mMarginCallTriggerEvent:
                    MarginCallTriggerObservable.OnNext(mMarginCallTriggerEvent);
                    break;
            }
        }

        private void DisposeObservableEventHandlers(Exception exception)
        {
            ClientDisconnectObservable.OnClientError(exception);
            AccountsTokenInvalidatedObservable.OnClientError(exception);
            ExecutionObservable.OnClientError(exception);
            TrailingSLChangedObservable.OnClientError(exception);
            SymbolChangedObservable.OnClientError(exception);
            TraderUpdatedObservable.OnClientError(exception);
            OrderErrorObservable.OnClientError(exception);
            MarginChangedObservable.OnClientError(exception);
            SpotObservable.OnClientError(exception);
            DepthObservable.OnClientError(exception);
            AccountDisconnectObservable.OnClientError(exception);
            MarginCallUpdateObservable.OnClientError(exception);
            MarginCallTriggerObservable.OnClientError(exception);
        }
    }
}  