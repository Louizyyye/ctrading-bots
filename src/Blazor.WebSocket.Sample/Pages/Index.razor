@using Samples.Shared.Services
@using Samples.Shared.Models
@using OpenAPI.Net.Helpers
@page "/"
@inject IJSRuntime JS

<div>
    <div class="row no-gutters m-0 p-0">
        <div class="col-10" oncontextmenu="return false">
            <canvas id="chartCanvas"></canvas>
        </div>
        <div class="col">
            <select id="accounts-list" class="form-select" @onchange="AccountSelectionChanged">
                @if (Accounts is not null)
                {
                    foreach (var account in Accounts)
                    {
                        <option value="@account.TraderLogin" id="@account.CtidTraderAccountId">@account.TraderLogin</option>
                    }
                }
            </select>
            <div class="table-wrapper-scroll-y" style="height: 65vh;">
                <table class="table table-hover table-dark table-striped table-bordered" id="symbolsTable">
                    <thead>
                        <tr>
                            <th scope="col">Name</th>
                            <th scope="col">Bid</th>
                            <th scope="col">Ask</th>
                        </tr>
                    </thead>
                    <tbody id="symbolsTableBody">
                        @if (SelectedAccountModel is not null)
                        {
                            foreach (var symbol in SelectedAccountModel.Symbols)
                            {
                                <tr id="@symbol.Id" @onclick="() => SymbolSelectionChanged(symbol)">
                                    <td id="name">@symbol.Name</td>
                                    <td id="bid">@symbol.Bid</td>
                                    <td id="ask">@symbol.Ask</td>
                                </tr>
                            }
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
    <div class="row no-gutters text-white w-100 m-0 p-0">
        <ul class="nav nav-tabs" id="accountTab" role="tablist">
            <li class="nav-item" role="presentation">
                <button class="nav-link active text-muted" id="positions-tab" data-bs-toggle="tab" data-bs-target="#positions" type="button" role="tab" aria-controls="positions" aria-selected="true">Positions</button>
            </li>
            <li class="nav-item" role="presentation">
                <button class="nav-link text-muted" id="orders-tab" data-bs-toggle="tab" data-bs-target="#orders" type="button" role="tab" aria-controls="orders" aria-selected="false">Orders</button>
            </li>
            <li class="nav-item" role="presentation">
                <button class="nav-link text-muted" id="history-tab" data-bs-toggle="tab" data-bs-target="#history" type="button" role="tab" aria-controls="history" aria-selected="false">History</button>
            </li>
            <li class="nav-item" role="presentation">
                <button class="nav-link text-muted" id="transactions-tab" data-bs-toggle="tab" data-bs-target="#transactions" type="button" role="tab" aria-controls="transactions" aria-selected="false">Transactions</button>
            </li>
        </ul>
        <div class="tab-content m-0 p-0" id="accountTabContent">
            <div class="tab-pane fade show active" id="positions" role="tabpanel" aria-labelledby="positions-tab">
                <div class="btn-toolbar ml-0 mt-1 mb-1 p-0" role="toolbar">
                    <button type="button" class="btn btn-secondary m-1" id="createMarketOrderButton" @onclick="() => ShowNewOrderModal(false)">Create New Order</button>
                    <button type="button" class="btn btn-danger m-1" id="closeAllPositionsButton">Close All Positions</button>
                </div>
                <div class="table-wrapper-scroll-y" style="height: 20vh;">
                    <table class="table table-hover table-dark table-striped table-bordered">
                        <thead>
                            <tr>
                                <th scope="col">ID</th>
                                <th scope="col">Symbol</th>
                                <th scope="col">Direction</th>
                                <th scope="col">Volume</th>
                                <th scope="col">Created</th>
                                <th scope="col">Entry Price</th>
                                <th scope="col">SL</th>
                                <th scope="col">TP</th>
                                <th scope="col">Commission</th>
                                <th scope="col">Swap</th>
                                <th scope="col">Margin</th>
                                <th scope="col">Pips</th>
                                <th scope="col">Label</th>
                                <th scope="col">Comment</th>
                                <th scope="col">Gross Profit</th>
                                <th scope="col">Net Profit</th>
                                <th scope="col"></th>
                            </tr>
                        </thead>
                        <tbody id="positions-table-body" />
                    </table>
                </div>
            </div>
            <div class="tab-pane fade" id="orders" role="tabpanel" aria-labelledby="orders-tab">
                <div class="btn-toolbar ml-0 mt-1 mb-1 p-0" role="toolbar">
                    <button type="button" class="btn btn-secondary m-1" id="createPendingOrderButton" @onclick="() => ShowNewOrderModal(true)">Create New Order</button>
                    <button type="button" class="btn btn-danger m-1" id="cancelAllOrdersButton">Cancel All Orders</button>
                </div>
                <div class="table-wrapper-scroll-y" style="height: 20vh;">
                    <table class="table table-hover table-dark table-striped table-bordered">
                        <thead>
                            <tr>
                                <th scope="col">ID</th>
                                <th scope="col">Symbol</th>
                                <th scope="col">Direction</th>
                                <th scope="col">Volume</th>
                                <th scope="col">Type</th>
                                <th scope="col">Created</th>
                                <th scope="col">Target Price</th>
                                <th scope="col">SL</th>
                                <th scope="col">TP</th>
                                <th scope="col">Expiry</th>
                                <th scope="col">Label</th>
                                <th scope="col">Comment</th>
                                <th scope="col"></th>
                            </tr>
                        </thead>
                        <tbody id="orders-table-body" />
                    </table>
                </div>
            </div>
            <div class="tab-pane fade" id="history" role="tabpanel" aria-labelledby="history-tab">
                <div class="btn-toolbar ml-0 mt-1 mb-1 p-0 row" role="toolbar">
                    <div class="col-1" style="width: 4%">
                        <label for="historyFromDateTime" class="m-2">From</label>
                    </div>
                    <div class="col-2">
                        <input type="datetime-local" id="historyFromDateTime" class="form-control m-1">
                    </div>
                    <div class="col-1" style="width: 3%">
                        <label for="historyToDateTime" class="m-2">To</label>
                    </div>
                    <div class="col-2">
                        <input type="datetime-local" id="historyToDateTime" class="form-control m-1">
                    </div>
                    <div class="col-2">
                        <button type="button" class="btn btn-secondary m-1" id="loadHistoryButton">Load</button>
                    </div>
                </div>
                <div class="table-wrapper-scroll-y" style="height: 20vh;">
                    <table class="table table-hover table-dark table-striped table-bordered">
                        <thead>
                            <tr>
                                <th scope="col">ID</th>
                                <th scope="col">Order ID</th>
                                <th scope="col">Position ID</th>
                                <th scope="col">Symbol</th>
                                <th scope="col">Direction</th>
                                <th scope="col">Volume</th>
                                <th scope="col">Filled Volume</th>
                                <th scope="col">Closed Volume</th>
                                <th scope="col">Status</th>
                                <th scope="col">Gross Profit</th>
                                <th scope="col">Swap</th>
                                <th scope="col">Closed Balance</th>
                                <th scope="col">Commission</th>
                                <th scope="col">Execution Price</th>
                                <th scope="col">Closing</th>
                                <th scope="col">Creation</th>
                                <th scope="col">Execution</th>
                                <th scope="col">Last Updated</th>
                            </tr>
                        </thead>
                        <tbody id="historyTableBody" />
                    </table>
                </div>
            </div>
            <div class="tab-pane fade" id="transactions" role="tabpanel" aria-labelledby="transactions-tab">
                <div class="btn-toolbar ml-0 mt-1 mb-1 p-0 row" role="toolbar">
                    <div class="col-1" style="width: 4%">
                        <label for="transactionsFromDateTime" class="m-2">From</label>
                    </div>
                    <div class="col-2">
                        <input type="datetime-local" id="transactionsFromDateTime" class="form-control m-1">
                    </div>
                    <div class="col-1" style="width: 3%">
                        <label for="transactionsToDateTime" class="m-2">To</label>
                    </div>
                    <div class="col-2">
                        <input type="datetime-local" id="transactionsToDateTime" class="form-control m-1">
                    </div>
                    <div class="col-2">
                        <button type="button" class="btn btn-secondary m-1" id="loadTransactionsButton">Load</button>
                    </div>
                </div>
                <div class="table-wrapper-scroll-y" style="height: 20vh;">
                    <table class="table table-hover table-dark table-striped table-bordered">
                        <thead>
                            <tr>
                                <th scope="col">ID</th>
                                <th scope="col">Type</th>
                                <th scope="col">Amount</th>
                                <th scope="col">Balance</th>
                                <th scope="col">Equity</th>
                                <th scope="col">Version</th>
                                <th scope="col">Note</th>
                                <th scope="col">Time</th>
                            </tr>
                        </thead>
                        <tbody id="transactionsTableBody" />
                    </table>
                </div>
            </div>
        </div>
    </div>
    <div class="row no-gutters text-white w-100 m-0 p-0" id="accountStats">
        <div class="col text-center">
            <p class="m-1">Balance</p>
            <p id="balance" class="m-1"></p>
        </div>

        <div class="col text-center">
            <p class="m-1">Equity</p>
            <p id="equity" class="m-1"></p>
        </div>

        <div class="col text-center">
            <p class="m-1">Margin Used</p>
            <p id="marginUsed" class="m-1"></p>
        </div>

        <div class="col text-center">
            <p class="m-1">Free Margin</p>
            <p id="freeMargin" class="m-1"></p>
        </div>

        <div class="col text-center">
            <p class="m-1">Margin Level</p>
            <p id="marginLevel" class="m-1"></p>
        </div>

        <div class="col text-center">
            <p class="m-1">Unr. Gross</p>
            <p id="unrealizedGrossProfit" class="m-1"></p>
        </div>

        <div class="col text-center">
            <p class="m-1">Unr. Net</p>
            <p id="unrealizedNetProfit" class="m-1"></p>
        </div>
    </div>
</div>

<div id="toasts-container" aria-live="polite" aria-atomic="true" class="d-flex flex-column flex-wrap justify-content-start align-items-start" style="position: absolute; bottom: 0; right: 0;" />

<Modal @ref="LoadingModal" ShowCloseButton="false">
    <Title>
        <h5 class="modal-title">Loading Data</h5>
    </Title>
    <Body>
        <p>Please wait...</p>
    </Body>
</Modal>

<Modal @ref="ApiCredentialsModal" ShowCloseButton="false">
    <Title>
        <h5 class="modal-title">API Credentials</h5>
    </Title>
    <Body>
        <div class="form-group">
            <div class="row">
                <label for="applicationClientIdInput" class="p-0">Application Client ID</label>
                <input type="text" class="form-control" @bind="@ApplicationClientId" id="applicationClientIdInput">
            </div>
            <div class="row">
                <label for="applicationClientSecretInput" class="p-0">Application Client Secret</label>
                <input type="text" class="form-control" @bind="@ApplicationClientSecret" id="applicationClientSecretInput">
            </div>
            <div class="row">
                <label for="accessTokenInput" class="p-0">Access Token</label>
                <input type="text" class="form-control" @bind="@AccessToken" id="accessTokenInput">
            </div>
        </div>
    </Body>
    <Footer>
        <a class="btn btn-primary" asp-page="Index" asp-page-handler="connect" @onclick="() => Connect()">Connect</a>
    </Footer>
</Modal>

<OrderModal Account="@SelectedAccountModel" @ref="OrderModal"></OrderModal>

<template id="toast-template">
    <div class="toast hide" role="alert" aria-live="assertive" aria-atomic="true">
        <div class="toast-header">
            <i class="rounded me-2" id="toast-icon"></i>
            <strong class="me-auto" id="toast-title"></strong>
            <small id="toast-title-small"></small>
            <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
        </div>
        <div class="toast-body" />
    </div>
</template>

@code
{

    public Modal ApiCredentialsModal { get; set; }

    public Modal LoadingModal { get; set; }

    public OrderModal OrderModal { get; set; }

    public string ApplicationClientId { get; set; } = "114_6487ns0byrok8s4osswkc0088wg0c408gokgw88gcw480c0kcc";

    public string ApplicationClientSecret { get; set; } = "381kqs4ae7ms0so4g88wgosk4wg8g4sk8owok4kso44os48gco";

    public string AccessToken { get; set; } = "hWWLpuEux4ozDqhTiMtCvDk_m9OkQyNO5qXaxNYXahY";

    public IEnumerable<ProtoOACtidTraderAccount> Accounts { get; set; }

    public AccountModel SelectedAccountModel { get; set; }

    public SymbolModel SelectedSymbol { get; set; }

    [Inject]
    private IOpenApiService ApiService { get; set; }

    [Inject]
    private ITradingAccountsService TradingAccountsService { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(1000);

        await ApiCredentialsModal.Open();
    }

    private async Task Connect()
    {
        LoadingModal.Open();

        var apiCredentials = new ApiCredentials
        {
            ClientId = ApplicationClientId,
            Secret = ApplicationClientSecret
        };

        await ApiService.Connect(apiCredentials);

        Console.WriteLine("Connected to API");

        await ApiCredentialsModal.Close();

        Console.WriteLine("Getting accounts");

        Accounts = await TradingAccountsService.GetAccounts(AccessToken);

        if (Accounts.Any())
        {
            await AccountSelectionChanged(Accounts.First().TraderLogin);
        }

        Console.WriteLine($"Account: {Accounts.Count()}");

        LoadingModal.Close();
    }

    private async Task AccountSelectionChanged(ChangeEventArgs e)
    {
        if (e.Value is null)
        {
            await AccountSelectionChanged(0);
        }
        else
        {
            var accountLogin = Convert.ToInt64(e.Value);

            await AccountSelectionChanged(accountLogin);
        }
    }

    private async Task AccountSelectionChanged(long accountLogin)
    {
        Console.WriteLine($"Selected account channged to {accountLogin}");

        if (SelectedAccountModel is not null)
        {
            TradingAccountsService.StopSymbolQuotes(SelectedAccountModel.Id);
        }

        if (accountLogin is 0) return;

        SelectedAccountModel = await TradingAccountsService.GetAccountModelByLogin(accountLogin);

        if (SelectedAccountModel is null) return;

        _ = UpdateQuotes();

        if (SelectedAccountModel.Symbols.Any())
        {
            await SymbolSelectionChanged(SelectedAccountModel.Symbols.First());
        }

        _ = StreamErrors();
    }

    private async Task UpdateQuotes()
    {
        var symbolQuotesChannel = TradingAccountsService.GetSymbolsQuoteChannel(SelectedAccountModel.Id);

        Console.WriteLine($"UpdateQuotes");

        while (await symbolQuotesChannel.Reader.WaitToReadAsync())
        {
            while (symbolQuotesChannel.Reader.TryRead(out var quote))
            {
                await JS.InvokeVoidAsync("updateSymbolQuote", quote);
            }
        }
    }

    private async Task SymbolSelectionChanged(SymbolModel symbol)
    {
        if (symbol is null || SelectedAccountModel is null) return;

        SelectedSymbol = symbol;

        var trendBars = await TradingAccountsService.GetSymbolTrendbars(SelectedAccountModel.Id, symbol.Id);

        await JS.InvokeVoidAsync("createChart", $"{symbol.Name} Daily", trendBars.Ohlc);
    }

    private async Task ShowNewOrderModal(bool isPending)
    {
        OrderModal.Title = "Create New Order";
        OrderModal.ButtonText = "Place Order";
        OrderModal.Symbol = SelectedSymbol;
        OrderModal.ShowPendingOrderTab = isPending;

        await OrderModal.Open();
    }

    private async Task StreamErrors()
    {
        var accountId = SelectedAccountModel.Id;

        var errorChannel = TradingAccountsService.GetErrorsChannel(accountId);

        while (await errorChannel.Reader.WaitToReadAsync(System.Threading.CancellationToken.None) && (SelectedAccountModel is not null || accountId == SelectedAccountModel.Id))
        {
            while (errorChannel.Reader.TryRead(out var error))
            {
                await JS.InvokeVoidAsync("onError", error);
            }
        }

        TradingAccountsService.StopErrors(accountId);
    }

}